// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gogetkarthik/service-specification/supertokens/client/hello (interfaces: ClientService)

// Package mock_hello is a generated GoMock package.
package mock_hello

import (
	runtime "github.com/go-openapi/runtime"
	hello "github.com/gogetkarthik/service-specification/supertokens/client/hello"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientService is a mock of ClientService interface
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// HelloDelete mocks base method
func (m *MockClientService) HelloDelete(arg0 *hello.HelloDeleteParams) (*hello.HelloDeleteOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelloDelete", arg0)
	ret0, _ := ret[0].(*hello.HelloDeleteOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloDelete indicates an expected call of HelloDelete
func (mr *MockClientServiceMockRecorder) HelloDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloDelete", reflect.TypeOf((*MockClientService)(nil).HelloDelete), arg0)
}

// HelloGet mocks base method
func (m *MockClientService) HelloGet(arg0 *hello.HelloGetParams) (*hello.HelloGetOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelloGet", arg0)
	ret0, _ := ret[0].(*hello.HelloGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloGet indicates an expected call of HelloGet
func (mr *MockClientServiceMockRecorder) HelloGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloGet", reflect.TypeOf((*MockClientService)(nil).HelloGet), arg0)
}

// HelloPost mocks base method
func (m *MockClientService) HelloPost(arg0 *hello.HelloPostParams) (*hello.HelloPostOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelloPost", arg0)
	ret0, _ := ret[0].(*hello.HelloPostOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloPost indicates an expected call of HelloPost
func (mr *MockClientServiceMockRecorder) HelloPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloPost", reflect.TypeOf((*MockClientService)(nil).HelloPost), arg0)
}

// HelloPut mocks base method
func (m *MockClientService) HelloPut(arg0 *hello.HelloPutParams) (*hello.HelloPutOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelloPut", arg0)
	ret0, _ := ret[0].(*hello.HelloPutOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloPut indicates an expected call of HelloPut
func (mr *MockClientServiceMockRecorder) HelloPut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloPut", reflect.TypeOf((*MockClientService)(nil).HelloPut), arg0)
}

// SetTransport mocks base method
func (m *MockClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport
func (mr *MockClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), arg0)
}
