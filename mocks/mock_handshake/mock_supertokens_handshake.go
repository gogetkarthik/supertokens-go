// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gogetkarthik/service-specification/supertokens/client/handshake (interfaces: ClientService)

// Package mock_handshake is a generated GoMock package.
package mock_handshake

import (
	runtime "github.com/go-openapi/runtime"
	handshake "github.com/gogetkarthik/service-specification/supertokens/client/handshake"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientService is a mock of ClientService interface
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// Handshake mocks base method
func (m *MockClientService) Handshake(arg0 *handshake.HandshakeParams) (*handshake.HandshakeOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handshake", arg0)
	ret0, _ := ret[0].(*handshake.HandshakeOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handshake indicates an expected call of Handshake
func (mr *MockClientServiceMockRecorder) Handshake(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handshake", reflect.TypeOf((*MockClientService)(nil).Handshake), arg0)
}

// SetTransport mocks base method
func (m *MockClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport
func (mr *MockClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), arg0)
}
