// Code generated by go-swagger; DO NOT EDIT.

package hello

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/gogetkarthik/service-specification/supertokens/models"
)

// HelloPostReader is a Reader for the HelloPost structure.
type HelloPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HelloPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHelloPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHelloPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHelloPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewHelloPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHelloPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHelloPostOK creates a HelloPostOK with default headers values
func NewHelloPostOK() *HelloPostOK {
	return &HelloPostOK{}
}

/*HelloPostOK handles this case with default header values.

Hello
*/
type HelloPostOK struct {
	Payload models.HelloOutput
}

func (o *HelloPostOK) Error() string {
	return fmt.Sprintf("[POST /hello][%d] helloPostOK  %+v", 200, o.Payload)
}

func (o *HelloPostOK) GetPayload() models.HelloOutput {
	return o.Payload
}

func (o *HelloPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHelloPostBadRequest creates a HelloPostBadRequest with default headers values
func NewHelloPostBadRequest() *HelloPostBadRequest {
	return &HelloPostBadRequest{}
}

/*HelloPostBadRequest handles this case with default header values.

Invalid input
*/
type HelloPostBadRequest struct {
	Payload models.Error
}

func (o *HelloPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /hello][%d] helloPostBadRequest  %+v", 400, o.Payload)
}

func (o *HelloPostBadRequest) GetPayload() models.Error {
	return o.Payload
}

func (o *HelloPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHelloPostNotFound creates a HelloPostNotFound with default headers values
func NewHelloPostNotFound() *HelloPostNotFound {
	return &HelloPostNotFound{}
}

/*HelloPostNotFound handles this case with default header values.

The specified resource was not found
*/
type HelloPostNotFound struct {
	Payload models.Error
}

func (o *HelloPostNotFound) Error() string {
	return fmt.Sprintf("[POST /hello][%d] helloPostNotFound  %+v", 404, o.Payload)
}

func (o *HelloPostNotFound) GetPayload() models.Error {
	return o.Payload
}

func (o *HelloPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHelloPostMethodNotAllowed creates a HelloPostMethodNotAllowed with default headers values
func NewHelloPostMethodNotAllowed() *HelloPostMethodNotAllowed {
	return &HelloPostMethodNotAllowed{}
}

/*HelloPostMethodNotAllowed handles this case with default header values.

Method not souported
*/
type HelloPostMethodNotAllowed struct {
	Payload models.Error
}

func (o *HelloPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /hello][%d] helloPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *HelloPostMethodNotAllowed) GetPayload() models.Error {
	return o.Payload
}

func (o *HelloPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHelloPostInternalServerError creates a HelloPostInternalServerError with default headers values
func NewHelloPostInternalServerError() *HelloPostInternalServerError {
	return &HelloPostInternalServerError{}
}

/*HelloPostInternalServerError handles this case with default header values.

Internal server error
*/
type HelloPostInternalServerError struct {
	Payload models.Error
}

func (o *HelloPostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /hello][%d] helloPostInternalServerError  %+v", 500, o.Payload)
}

func (o *HelloPostInternalServerError) GetPayload() models.Error {
	return o.Payload
}

func (o *HelloPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
