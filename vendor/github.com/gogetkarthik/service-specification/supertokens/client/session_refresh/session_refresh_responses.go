// Code generated by go-swagger; DO NOT EDIT.

package session_refresh

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/gogetkarthik/service-specification/supertokens/models"
)

// SessionRefreshReader is a Reader for the SessionRefresh structure.
type SessionRefreshReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionRefreshReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionRefreshOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionRefreshBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionRefreshNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSessionRefreshMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSessionRefreshInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSessionRefreshOK creates a SessionRefreshOK with default headers values
func NewSessionRefreshOK() *SessionRefreshOK {
	return &SessionRefreshOK{}
}

/*SessionRefreshOK handles this case with default header values.

Session details
*/
type SessionRefreshOK struct {
	Payload *models.SessionOutput
}

func (o *SessionRefreshOK) Error() string {
	return fmt.Sprintf("[POST /session/refresh][%d] sessionRefreshOK  %+v", 200, o.Payload)
}

func (o *SessionRefreshOK) GetPayload() *models.SessionOutput {
	return o.Payload
}

func (o *SessionRefreshOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshBadRequest creates a SessionRefreshBadRequest with default headers values
func NewSessionRefreshBadRequest() *SessionRefreshBadRequest {
	return &SessionRefreshBadRequest{}
}

/*SessionRefreshBadRequest handles this case with default header values.

Invalid input
*/
type SessionRefreshBadRequest struct {
	Payload models.Error
}

func (o *SessionRefreshBadRequest) Error() string {
	return fmt.Sprintf("[POST /session/refresh][%d] sessionRefreshBadRequest  %+v", 400, o.Payload)
}

func (o *SessionRefreshBadRequest) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionRefreshBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshNotFound creates a SessionRefreshNotFound with default headers values
func NewSessionRefreshNotFound() *SessionRefreshNotFound {
	return &SessionRefreshNotFound{}
}

/*SessionRefreshNotFound handles this case with default header values.

The specified resource was not found
*/
type SessionRefreshNotFound struct {
	Payload models.Error
}

func (o *SessionRefreshNotFound) Error() string {
	return fmt.Sprintf("[POST /session/refresh][%d] sessionRefreshNotFound  %+v", 404, o.Payload)
}

func (o *SessionRefreshNotFound) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionRefreshNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshMethodNotAllowed creates a SessionRefreshMethodNotAllowed with default headers values
func NewSessionRefreshMethodNotAllowed() *SessionRefreshMethodNotAllowed {
	return &SessionRefreshMethodNotAllowed{}
}

/*SessionRefreshMethodNotAllowed handles this case with default header values.

Method not souported
*/
type SessionRefreshMethodNotAllowed struct {
	Payload models.Error
}

func (o *SessionRefreshMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /session/refresh][%d] sessionRefreshMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SessionRefreshMethodNotAllowed) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionRefreshMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionRefreshInternalServerError creates a SessionRefreshInternalServerError with default headers values
func NewSessionRefreshInternalServerError() *SessionRefreshInternalServerError {
	return &SessionRefreshInternalServerError{}
}

/*SessionRefreshInternalServerError handles this case with default header values.

Internal server error
*/
type SessionRefreshInternalServerError struct {
	Payload models.Error
}

func (o *SessionRefreshInternalServerError) Error() string {
	return fmt.Sprintf("[POST /session/refresh][%d] sessionRefreshInternalServerError  %+v", 500, o.Payload)
}

func (o *SessionRefreshInternalServerError) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionRefreshInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
