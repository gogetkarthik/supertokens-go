// Code generated by go-swagger; DO NOT EDIT.

package session_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/gogetkarthik/service-specification/supertokens/models"
)

// SessionUserReader is a Reader for the SessionUser structure.
type SessionUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSessionUserMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSessionUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSessionUserOK creates a SessionUserOK with default headers values
func NewSessionUserOK() *SessionUserOK {
	return &SessionUserOK{}
}

/*SessionUserOK handles this case with default header values.

The session data in database
*/
type SessionUserOK struct {
	Payload *models.SessionUserOutput
}

func (o *SessionUserOK) Error() string {
	return fmt.Sprintf("[GET /session/user][%d] sessionUserOK  %+v", 200, o.Payload)
}

func (o *SessionUserOK) GetPayload() *models.SessionUserOutput {
	return o.Payload
}

func (o *SessionUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionUserOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionUserBadRequest creates a SessionUserBadRequest with default headers values
func NewSessionUserBadRequest() *SessionUserBadRequest {
	return &SessionUserBadRequest{}
}

/*SessionUserBadRequest handles this case with default header values.

Invalid input
*/
type SessionUserBadRequest struct {
	Payload models.Error
}

func (o *SessionUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /session/user][%d] sessionUserBadRequest  %+v", 400, o.Payload)
}

func (o *SessionUserBadRequest) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionUserNotFound creates a SessionUserNotFound with default headers values
func NewSessionUserNotFound() *SessionUserNotFound {
	return &SessionUserNotFound{}
}

/*SessionUserNotFound handles this case with default header values.

The specified resource was not found
*/
type SessionUserNotFound struct {
	Payload models.Error
}

func (o *SessionUserNotFound) Error() string {
	return fmt.Sprintf("[GET /session/user][%d] sessionUserNotFound  %+v", 404, o.Payload)
}

func (o *SessionUserNotFound) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionUserMethodNotAllowed creates a SessionUserMethodNotAllowed with default headers values
func NewSessionUserMethodNotAllowed() *SessionUserMethodNotAllowed {
	return &SessionUserMethodNotAllowed{}
}

/*SessionUserMethodNotAllowed handles this case with default header values.

Method not souported
*/
type SessionUserMethodNotAllowed struct {
	Payload models.Error
}

func (o *SessionUserMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /session/user][%d] sessionUserMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SessionUserMethodNotAllowed) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionUserMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionUserInternalServerError creates a SessionUserInternalServerError with default headers values
func NewSessionUserInternalServerError() *SessionUserInternalServerError {
	return &SessionUserInternalServerError{}
}

/*SessionUserInternalServerError handles this case with default header values.

Internal server error
*/
type SessionUserInternalServerError struct {
	Payload models.Error
}

func (o *SessionUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /session/user][%d] sessionUserInternalServerError  %+v", 500, o.Payload)
}

func (o *SessionUserInternalServerError) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
