// Code generated by go-swagger; DO NOT EDIT.

package session_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSessionUserParams creates a new SessionUserParams object
// with the default values initialized.
func NewSessionUserParams() *SessionUserParams {
	var ()
	return &SessionUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSessionUserParamsWithTimeout creates a new SessionUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSessionUserParamsWithTimeout(timeout time.Duration) *SessionUserParams {
	var ()
	return &SessionUserParams{

		timeout: timeout,
	}
}

// NewSessionUserParamsWithContext creates a new SessionUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewSessionUserParamsWithContext(ctx context.Context) *SessionUserParams {
	var ()
	return &SessionUserParams{

		Context: ctx,
	}
}

// NewSessionUserParamsWithHTTPClient creates a new SessionUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSessionUserParamsWithHTTPClient(client *http.Client) *SessionUserParams {
	var ()
	return &SessionUserParams{
		HTTPClient: client,
	}
}

/*SessionUserParams contains all the parameters to send to the API endpoint
for the session user operation typically these are written to a http.Request
*/
type SessionUserParams struct {

	/*SessionUser*/
	SessionUser string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the session user params
func (o *SessionUserParams) WithTimeout(timeout time.Duration) *SessionUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the session user params
func (o *SessionUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the session user params
func (o *SessionUserParams) WithContext(ctx context.Context) *SessionUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the session user params
func (o *SessionUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the session user params
func (o *SessionUserParams) WithHTTPClient(client *http.Client) *SessionUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the session user params
func (o *SessionUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSessionUser adds the sessionUser to the session user params
func (o *SessionUserParams) WithSessionUser(sessionUser string) *SessionUserParams {
	o.SetSessionUser(sessionUser)
	return o
}

// SetSessionUser adds the sessionUser to the session user params
func (o *SessionUserParams) SetSessionUser(sessionUser string) {
	o.SessionUser = sessionUser
}

// WriteToRequest writes these params to a swagger request
func (o *SessionUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param session_user
	qrSessionUser := o.SessionUser
	qSessionUser := qrSessionUser
	if qSessionUser != "" {
		if err := r.SetQueryParam("session_user", qSessionUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
