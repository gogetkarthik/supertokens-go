// Code generated by go-swagger; DO NOT EDIT.

package session_verify

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/gogetkarthik/service-specification/supertokens/models"
)

// SessionVerifyReader is a Reader for the SessionVerify structure.
type SessionVerifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionVerifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionVerifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionVerifyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionVerifyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSessionVerifyMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSessionVerifyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSessionVerifyOK creates a SessionVerifyOK with default headers values
func NewSessionVerifyOK() *SessionVerifyOK {
	return &SessionVerifyOK{}
}

/*SessionVerifyOK handles this case with default header values.

Session details
*/
type SessionVerifyOK struct {
	Payload *models.SessionOutput
}

func (o *SessionVerifyOK) Error() string {
	return fmt.Sprintf("[POST /session/verify][%d] sessionVerifyOK  %+v", 200, o.Payload)
}

func (o *SessionVerifyOK) GetPayload() *models.SessionOutput {
	return o.Payload
}

func (o *SessionVerifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionVerifyBadRequest creates a SessionVerifyBadRequest with default headers values
func NewSessionVerifyBadRequest() *SessionVerifyBadRequest {
	return &SessionVerifyBadRequest{}
}

/*SessionVerifyBadRequest handles this case with default header values.

Invalid input
*/
type SessionVerifyBadRequest struct {
	Payload models.Error
}

func (o *SessionVerifyBadRequest) Error() string {
	return fmt.Sprintf("[POST /session/verify][%d] sessionVerifyBadRequest  %+v", 400, o.Payload)
}

func (o *SessionVerifyBadRequest) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionVerifyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionVerifyNotFound creates a SessionVerifyNotFound with default headers values
func NewSessionVerifyNotFound() *SessionVerifyNotFound {
	return &SessionVerifyNotFound{}
}

/*SessionVerifyNotFound handles this case with default header values.

The specified resource was not found
*/
type SessionVerifyNotFound struct {
	Payload models.Error
}

func (o *SessionVerifyNotFound) Error() string {
	return fmt.Sprintf("[POST /session/verify][%d] sessionVerifyNotFound  %+v", 404, o.Payload)
}

func (o *SessionVerifyNotFound) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionVerifyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionVerifyMethodNotAllowed creates a SessionVerifyMethodNotAllowed with default headers values
func NewSessionVerifyMethodNotAllowed() *SessionVerifyMethodNotAllowed {
	return &SessionVerifyMethodNotAllowed{}
}

/*SessionVerifyMethodNotAllowed handles this case with default header values.

Method not souported
*/
type SessionVerifyMethodNotAllowed struct {
	Payload models.Error
}

func (o *SessionVerifyMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /session/verify][%d] sessionVerifyMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SessionVerifyMethodNotAllowed) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionVerifyMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionVerifyInternalServerError creates a SessionVerifyInternalServerError with default headers values
func NewSessionVerifyInternalServerError() *SessionVerifyInternalServerError {
	return &SessionVerifyInternalServerError{}
}

/*SessionVerifyInternalServerError handles this case with default header values.

Internal server error
*/
type SessionVerifyInternalServerError struct {
	Payload models.Error
}

func (o *SessionVerifyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /session/verify][%d] sessionVerifyInternalServerError  %+v", 500, o.Payload)
}

func (o *SessionVerifyInternalServerError) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionVerifyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
