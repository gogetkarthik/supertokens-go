// Code generated by go-swagger; DO NOT EDIT.

package session_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/gogetkarthik/service-specification/supertokens/models"
)

// NewSessionDataUpdateParams creates a new SessionDataUpdateParams object
// with the default values initialized.
func NewSessionDataUpdateParams() *SessionDataUpdateParams {
	var ()
	return &SessionDataUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSessionDataUpdateParamsWithTimeout creates a new SessionDataUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSessionDataUpdateParamsWithTimeout(timeout time.Duration) *SessionDataUpdateParams {
	var ()
	return &SessionDataUpdateParams{

		timeout: timeout,
	}
}

// NewSessionDataUpdateParamsWithContext creates a new SessionDataUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewSessionDataUpdateParamsWithContext(ctx context.Context) *SessionDataUpdateParams {
	var ()
	return &SessionDataUpdateParams{

		Context: ctx,
	}
}

// NewSessionDataUpdateParamsWithHTTPClient creates a new SessionDataUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSessionDataUpdateParamsWithHTTPClient(client *http.Client) *SessionDataUpdateParams {
	var ()
	return &SessionDataUpdateParams{
		HTTPClient: client,
	}
}

/*SessionDataUpdateParams contains all the parameters to send to the API endpoint
for the session data update operation typically these are written to a http.Request
*/
type SessionDataUpdateParams struct {

	/*SessionDataInput*/
	SessionDataInput *models.SessionDataInput

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the session data update params
func (o *SessionDataUpdateParams) WithTimeout(timeout time.Duration) *SessionDataUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the session data update params
func (o *SessionDataUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the session data update params
func (o *SessionDataUpdateParams) WithContext(ctx context.Context) *SessionDataUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the session data update params
func (o *SessionDataUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the session data update params
func (o *SessionDataUpdateParams) WithHTTPClient(client *http.Client) *SessionDataUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the session data update params
func (o *SessionDataUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSessionDataInput adds the sessionDataInput to the session data update params
func (o *SessionDataUpdateParams) WithSessionDataInput(sessionDataInput *models.SessionDataInput) *SessionDataUpdateParams {
	o.SetSessionDataInput(sessionDataInput)
	return o
}

// SetSessionDataInput adds the sessionDataInput to the session data update params
func (o *SessionDataUpdateParams) SetSessionDataInput(sessionDataInput *models.SessionDataInput) {
	o.SessionDataInput = sessionDataInput
}

// WriteToRequest writes these params to a swagger request
func (o *SessionDataUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SessionDataInput != nil {
		if err := r.SetBodyParam(o.SessionDataInput); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
