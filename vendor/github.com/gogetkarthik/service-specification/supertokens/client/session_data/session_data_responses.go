// Code generated by go-swagger; DO NOT EDIT.

package session_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/gogetkarthik/service-specification/supertokens/models"
)

// SessionDataReader is a Reader for the SessionData structure.
type SessionDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSessionDataMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSessionDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSessionDataOK creates a SessionDataOK with default headers values
func NewSessionDataOK() *SessionDataOK {
	return &SessionDataOK{}
}

/*SessionDataOK handles this case with default header values.

The session data in database
*/
type SessionDataOK struct {
	Payload *models.SessionDataOutput
}

func (o *SessionDataOK) Error() string {
	return fmt.Sprintf("[GET /session/data][%d] sessionDataOK  %+v", 200, o.Payload)
}

func (o *SessionDataOK) GetPayload() *models.SessionDataOutput {
	return o.Payload
}

func (o *SessionDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionDataOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataBadRequest creates a SessionDataBadRequest with default headers values
func NewSessionDataBadRequest() *SessionDataBadRequest {
	return &SessionDataBadRequest{}
}

/*SessionDataBadRequest handles this case with default header values.

Invalid input
*/
type SessionDataBadRequest struct {
	Payload models.Error
}

func (o *SessionDataBadRequest) Error() string {
	return fmt.Sprintf("[GET /session/data][%d] sessionDataBadRequest  %+v", 400, o.Payload)
}

func (o *SessionDataBadRequest) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataNotFound creates a SessionDataNotFound with default headers values
func NewSessionDataNotFound() *SessionDataNotFound {
	return &SessionDataNotFound{}
}

/*SessionDataNotFound handles this case with default header values.

The specified resource was not found
*/
type SessionDataNotFound struct {
	Payload models.Error
}

func (o *SessionDataNotFound) Error() string {
	return fmt.Sprintf("[GET /session/data][%d] sessionDataNotFound  %+v", 404, o.Payload)
}

func (o *SessionDataNotFound) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataMethodNotAllowed creates a SessionDataMethodNotAllowed with default headers values
func NewSessionDataMethodNotAllowed() *SessionDataMethodNotAllowed {
	return &SessionDataMethodNotAllowed{}
}

/*SessionDataMethodNotAllowed handles this case with default header values.

Method not souported
*/
type SessionDataMethodNotAllowed struct {
	Payload models.Error
}

func (o *SessionDataMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /session/data][%d] sessionDataMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SessionDataMethodNotAllowed) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataInternalServerError creates a SessionDataInternalServerError with default headers values
func NewSessionDataInternalServerError() *SessionDataInternalServerError {
	return &SessionDataInternalServerError{}
}

/*SessionDataInternalServerError handles this case with default header values.

Internal server error
*/
type SessionDataInternalServerError struct {
	Payload models.Error
}

func (o *SessionDataInternalServerError) Error() string {
	return fmt.Sprintf("[GET /session/data][%d] sessionDataInternalServerError  %+v", 500, o.Payload)
}

func (o *SessionDataInternalServerError) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
