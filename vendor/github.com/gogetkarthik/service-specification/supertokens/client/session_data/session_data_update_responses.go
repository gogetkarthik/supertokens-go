// Code generated by go-swagger; DO NOT EDIT.

package session_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/gogetkarthik/service-specification/supertokens/models"
)

// SessionDataUpdateReader is a Reader for the SessionDataUpdate structure.
type SessionDataUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionDataUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionDataUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionDataUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSessionDataUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSessionDataUpdateMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSessionDataUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSessionDataUpdateOK creates a SessionDataUpdateOK with default headers values
func NewSessionDataUpdateOK() *SessionDataUpdateOK {
	return &SessionDataUpdateOK{}
}

/*SessionDataUpdateOK handles this case with default header values.

The session data in database
*/
type SessionDataUpdateOK struct {
	Payload *models.SessionDataOutput
}

func (o *SessionDataUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /session/data][%d] sessionDataUpdateOK  %+v", 200, o.Payload)
}

func (o *SessionDataUpdateOK) GetPayload() *models.SessionDataOutput {
	return o.Payload
}

func (o *SessionDataUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionDataOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataUpdateBadRequest creates a SessionDataUpdateBadRequest with default headers values
func NewSessionDataUpdateBadRequest() *SessionDataUpdateBadRequest {
	return &SessionDataUpdateBadRequest{}
}

/*SessionDataUpdateBadRequest handles this case with default header values.

Invalid input
*/
type SessionDataUpdateBadRequest struct {
	Payload models.Error
}

func (o *SessionDataUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /session/data][%d] sessionDataUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SessionDataUpdateBadRequest) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataUpdateNotFound creates a SessionDataUpdateNotFound with default headers values
func NewSessionDataUpdateNotFound() *SessionDataUpdateNotFound {
	return &SessionDataUpdateNotFound{}
}

/*SessionDataUpdateNotFound handles this case with default header values.

The specified resource was not found
*/
type SessionDataUpdateNotFound struct {
	Payload models.Error
}

func (o *SessionDataUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /session/data][%d] sessionDataUpdateNotFound  %+v", 404, o.Payload)
}

func (o *SessionDataUpdateNotFound) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataUpdateMethodNotAllowed creates a SessionDataUpdateMethodNotAllowed with default headers values
func NewSessionDataUpdateMethodNotAllowed() *SessionDataUpdateMethodNotAllowed {
	return &SessionDataUpdateMethodNotAllowed{}
}

/*SessionDataUpdateMethodNotAllowed handles this case with default header values.

Method not souported
*/
type SessionDataUpdateMethodNotAllowed struct {
	Payload models.Error
}

func (o *SessionDataUpdateMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /session/data][%d] sessionDataUpdateMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SessionDataUpdateMethodNotAllowed) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataUpdateMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionDataUpdateInternalServerError creates a SessionDataUpdateInternalServerError with default headers values
func NewSessionDataUpdateInternalServerError() *SessionDataUpdateInternalServerError {
	return &SessionDataUpdateInternalServerError{}
}

/*SessionDataUpdateInternalServerError handles this case with default header values.

Internal server error
*/
type SessionDataUpdateInternalServerError struct {
	Payload models.Error
}

func (o *SessionDataUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /session/data][%d] sessionDataUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *SessionDataUpdateInternalServerError) GetPayload() models.Error {
	return o.Payload
}

func (o *SessionDataUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
