// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SessionOutput Session details
//
// swagger:model SessionOutput
type SessionOutput struct {

	// access token
	AccessToken *Token `json:"accessToken,omitempty"`

	// anti csrf token
	AntiCsrfToken AntiCsrfToken `json:"antiCsrfToken,omitempty"`

	// id refresh token
	IDRefreshToken *Token `json:"idRefreshToken,omitempty"`

	// jwt signing public key
	JwtSigningPublicKey JWTSigningPublicKey `json:"jwtSigningPublicKey,omitempty"`

	// jwt signing public key expiry time
	JwtSigningPublicKeyExpiryTime JWTSigningPublicKeyExpiryTime `json:"jwtSigningPublicKeyExpiryTime,omitempty"`

	// message
	Message Message `json:"message,omitempty"`

	// refresh token
	RefreshToken *Token `json:"refreshToken,omitempty"`

	// session
	Session *Session `json:"session,omitempty"`

	// status
	Status Status `json:"status,omitempty"`
}

// Validate validates this session output
func (m *SessionOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAntiCsrfToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwtSigningPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwtSigningPublicKeyExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSession(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionOutput) validateAccessToken(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessToken) { // not required
		return nil
	}

	if m.AccessToken != nil {
		if err := m.AccessToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessToken")
			}
			return err
		}
	}

	return nil
}

func (m *SessionOutput) validateAntiCsrfToken(formats strfmt.Registry) error {

	if swag.IsZero(m.AntiCsrfToken) { // not required
		return nil
	}

	if err := m.AntiCsrfToken.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("antiCsrfToken")
		}
		return err
	}

	return nil
}

func (m *SessionOutput) validateIDRefreshToken(formats strfmt.Registry) error {

	if swag.IsZero(m.IDRefreshToken) { // not required
		return nil
	}

	if m.IDRefreshToken != nil {
		if err := m.IDRefreshToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idRefreshToken")
			}
			return err
		}
	}

	return nil
}

func (m *SessionOutput) validateJwtSigningPublicKey(formats strfmt.Registry) error {

	if swag.IsZero(m.JwtSigningPublicKey) { // not required
		return nil
	}

	if err := m.JwtSigningPublicKey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("jwtSigningPublicKey")
		}
		return err
	}

	return nil
}

func (m *SessionOutput) validateJwtSigningPublicKeyExpiryTime(formats strfmt.Registry) error {

	if swag.IsZero(m.JwtSigningPublicKeyExpiryTime) { // not required
		return nil
	}

	if err := m.JwtSigningPublicKeyExpiryTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("jwtSigningPublicKeyExpiryTime")
		}
		return err
	}

	return nil
}

func (m *SessionOutput) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if err := m.Message.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("message")
		}
		return err
	}

	return nil
}

func (m *SessionOutput) validateRefreshToken(formats strfmt.Registry) error {

	if swag.IsZero(m.RefreshToken) { // not required
		return nil
	}

	if m.RefreshToken != nil {
		if err := m.RefreshToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshToken")
			}
			return err
		}
	}

	return nil
}

func (m *SessionOutput) validateSession(formats strfmt.Registry) error {

	if swag.IsZero(m.Session) { // not required
		return nil
	}

	if m.Session != nil {
		if err := m.Session.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("session")
			}
			return err
		}
	}

	return nil
}

func (m *SessionOutput) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionOutput) UnmarshalBinary(b []byte) error {
	var res SessionOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
