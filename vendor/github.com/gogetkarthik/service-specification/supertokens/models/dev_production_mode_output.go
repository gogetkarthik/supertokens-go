// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevProductionModeOutput Dev production mode details
//
// swagger:model DevProductionModeOutput
type DevProductionModeOutput struct {

	// mode
	// Enum: [DEV PRODUCTION]
	Mode string `json:"mode,omitempty"`

	// status
	Status Status `json:"status,omitempty"`
}

// Validate validates this dev production mode output
func (m *DevProductionModeOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var devProductionModeOutputTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEV","PRODUCTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devProductionModeOutputTypeModePropEnum = append(devProductionModeOutputTypeModePropEnum, v)
	}
}

const (

	// DevProductionModeOutputModeDEV captures enum value "DEV"
	DevProductionModeOutputModeDEV string = "DEV"

	// DevProductionModeOutputModePRODUCTION captures enum value "PRODUCTION"
	DevProductionModeOutputModePRODUCTION string = "PRODUCTION"
)

// prop value enum
func (m *DevProductionModeOutput) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, devProductionModeOutputTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DevProductionModeOutput) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *DevProductionModeOutput) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevProductionModeOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevProductionModeOutput) UnmarshalBinary(b []byte) error {
	var res DevProductionModeOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
